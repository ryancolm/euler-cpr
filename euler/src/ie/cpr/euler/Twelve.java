/**
 * 
 */
package ie.cpr.euler;

import java.util.ArrayList;

/**
 * @author colm.ryan
 * 
 */
public class Twelve {
	/*
	 * The sequence of triangle numbers is generated by adding the natural
	 * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
	 * 28. The first ten terms would be:
	 * 
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 * 
	 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
	 * 1,2,4,7,14,28 We can see that 28 is the first triangle number to have
	 * over five divisors.
	 * 
	 * What is the value of the first triangle number to have over five hundred
	 * divisors?
	 */

	/**
	 * 
	 */
	public Twelve() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Twelve twelve = new Twelve();
		twelve.solve();
		//long tr28 = twelve.triangle(7L);
		//System.out.println("tr28 : " + tr28 + " " + twelve.factorise(tr28).toString());

	}
	
	private void solve(){
		ArrayList<Long> factors = new ArrayList<Long>();
		
		long number = 1L;
		long tri = -1L;
		
		while(factors.size()<500){
			tri = triangle(number);
			factors = factorise(tri);
			
			//if(number<=28){
			//	System.out.println("number : " + number + " " + factors.toString());
			//}
			
			//if(number%100==0){
			//	System.out.println("tri " + tri + " factors " + factors.size() + " number : " + number + " " + factors.toString());
			//}
			
			number ++;
		}
		
		System.out.println("tri " + tri + " factors " + factors.size() + " number : " + number + " " + factors.toString());
		
		
	}
	
	private long triangle(long number){
		long triNum = 0L;
		//System.out.println("number " + number + " tr " + triNum);
		for(long n=1; n<=number; n++){
			//System.out.println("n " + n + " tr " + triNum);
			triNum += n;
		}
		return triNum;
	}
	
	private ArrayList<Long> factorise(long number){
		ArrayList<Long> factors = new ArrayList<Long>();
		factors.add(1L);
		for (long i = 2; i <= number; i++) {
            if(number % i == 0) {
            	if(!factors.contains(number)){
            		factors.add(i);
            	}
            }
        }
		return factors;
	}

}
